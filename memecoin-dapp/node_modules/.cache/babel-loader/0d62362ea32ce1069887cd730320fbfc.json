{"ast":null,"code":"var _jsxFileName = \"/Users/SaffetYurtoglu/Desktop/memecoin-dapp-completed/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport { ethers, utils } from \"ethers\";\nimport abi from \"./contracts/MemeCoin.json\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [isWalletConnected, setIsWalletConnected] = useState(false);\n  const [inputValue, setInputValue] = useState({\n    walletAddress: \"\",\n    transferAmount: \"\",\n    burnAmount: \"\",\n    mintAmount: \"\"\n  });\n  const [tokenName, setTokenName] = useState(\"\");\n  const [tokenSymbol, setTokenSymbol] = useState(\"\");\n  const [tokenTotalSupply, setTokenTotalSupply] = useState(0);\n  const [isTokenOwner, setIsTokenOwner] = useState(false);\n  const [tokenOwnerAddress, setTokenOwnerAddress] = useState(null);\n  const [yourWalletAddress, setYourWalletAddress] = useState(null);\n  const [error, setError] = useState(null);\n  const contractAddress = '0x5FbDB2315678afecb367f032d93F642f64180aa3';\n  const contractABI = abi.abi;\n\n  const checkIfWalletIsConnected = async () => {\n    try {\n      if (window.ethereum) {\n        const accounts = await window.ethereum.request({\n          method: 'eth_requestAccounts'\n        });\n        const account = accounts[0];\n        setIsWalletConnected(true);\n        setYourWalletAddress(account);\n        console.log(\"Account Connected: \", account);\n      } else {\n        setError(\"Install a MetaMask wallet to get our token.\");\n        console.log(\"No Metamask detected\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const getTokenInfo = async () => {\n    try {\n      if (window.ethereum) {\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\n        const signer = provider.getSigner();\n        const tokenContract = new ethers.Contract(contractAddress, contractABI, signer);\n        const [account] = await window.ethereum.request({\n          method: 'eth_requestAccounts'\n        });\n        let tokenName = await tokenContract.name();\n        let tokenSymbol = await tokenContract.symbol();\n        let tokenOwner = await tokenContract.owner();\n        let tokenSupply = await tokenContract.totalSupply();\n        tokenSupply = utils.formatEther(tokenSupply);\n        setTokenName(`${tokenName} `);\n        setTokenSymbol(tokenSymbol);\n        setTokenTotalSupply(tokenSupply);\n        setTokenOwnerAddress(tokenOwner);\n\n        if (account.toLowerCase() === tokenOwner.toLowerCase()) {\n          setIsTokenOwner(true);\n        }\n\n        console.log(\"Token Name: \", tokenName);\n        console.log(\"Token Symbol: \", tokenSymbol);\n        console.log(\"Token Supply: \", tokenSupply);\n        console.log(\"Token Owner: \", tokenOwner);\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const transferToken = async event => {\n    event.preventDefault();\n\n    try {\n      if (window.ethereum) {\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\n        const signer = provider.getSigner();\n        const tokenContract = new ethers.Contract(contractAddress, contractABI, signer);\n        const txn = await tokenContract.transfer(inputValue.walletAddress, utils.parseEther(inputValue.transferAmount));\n        console.log(\"Transfering tokens...\");\n        await txn.wait();\n        console.log(\"Tokens Transfered\", txn.hash);\n      } else {\n        console.log(\"Ethereum object not found, install Metamask.\");\n        setError(\"Install a MetaMask wallet to get our token.\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const burnTokens = async event => {\n    event.preventDefault();\n\n    try {\n      if (window.ethereum) {\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\n        const signer = provider.getSigner();\n        const tokenContract = new ethers.Contract(contractAddress, contractABI, signer);\n        const txn = await tokenContract.burn(utils.parseEther(inputValue.burnAmount));\n        console.log(\"Burning tokens...\");\n        await txn.wait();\n        console.log(\"Tokens burned...\", txn.hash);\n        let tokenSupply = await tokenContract.totalSupply();\n        tokenSupply = utils.formatEther(tokenSupply);\n        setTokenTotalSupply(tokenSupply);\n      } else {\n        console.log(\"Ethereum object not found, install Metamask.\");\n        setError(\"Install a MetaMask wallet to get our token.\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const mintTokens = async event => {\n    event.preventDefault();\n\n    try {\n      if (window.ethereum) {\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\n        const signer = provider.getSigner();\n        const tokenContract = new ethers.Contract(contractAddress, contractABI, signer);\n        let tokenOwner = await tokenContract.owner();\n        const txn = await tokenContract.mint(tokenOwner, utils.parseEther(inputValue.mintAmount));\n        console.log(\"Minting tokens...\");\n        await txn.wait();\n        console.log(\"Tokens minted...\", txn.hash);\n        let tokenSupply = await tokenContract.totalSupply();\n        tokenSupply = utils.formatEther(tokenSupply);\n        setTokenTotalSupply(tokenSupply);\n      } else {\n        console.log(\"Ethereum object not found, install Metamask.\");\n        setError(\"Install a MetaMask wallet to get our token.\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const handleInputChange = event => {\n    setInputValue(prevFormData => ({ ...prevFormData,\n      [event.target.name]: event.target.value\n    }));\n  };\n\n  useEffect(() => {\n    checkIfWalletIsConnected();\n    getTokenInfo();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    className: \"main-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"headline\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"headline-gradient\",\n        children: \"Meme Coin Project\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        className: \"inline p-3 ml-2\",\n        src: \"https://i.imgur.com/5JfHKHU.png\",\n        alt: \"Meme Coin\",\n        width: \"60\",\n        height: \"30\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"customer-section px-10 pt-5 pb-10\",\n      children: [error && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-2xl text-red-700\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 19\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mt-5\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"mr-5\",\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Coin:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 161,\n            columnNumber: 34\n          }, this), \" \", tokenName, \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"mr-5\",\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Ticker:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 162,\n            columnNumber: 34\n          }, this), \"  \", tokenSymbol, \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"mr-5\",\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Total Supply:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 163,\n            columnNumber: 34\n          }, this), \"  \", tokenTotalSupply]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mt-7 mb-9\",\n        children: /*#__PURE__*/_jsxDEV(\"form\", {\n          className: \"form-style\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            className: \"input-double\",\n            onChange: handleInputChange,\n            name: \"walletAddress\",\n            placeholder: \"Wallet Address\",\n            value: inputValue.walletAddress\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 167,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            className: \"input-double\",\n            onChange: handleInputChange,\n            name: \"transferAmount\",\n            placeholder: `0.0000 ${tokenSymbol}`,\n            value: inputValue.transferAmount\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 175,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn-purple\",\n            onClick: transferToken,\n            children: \"Transfer Tokens\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 183,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 9\n      }, this), isTokenOwner && /*#__PURE__*/_jsxDEV(\"section\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mt-10 mb-10\",\n          children: /*#__PURE__*/_jsxDEV(\"form\", {\n            className: \"form-style\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              className: \"input-style\",\n              onChange: handleInputChange,\n              name: \"burnAmount\",\n              placeholder: `0.0000 ${tokenSymbol}`,\n              value: inputValue.burnAmount\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 192,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn-purple\",\n              onClick: burnTokens,\n              children: \"Burn Tokens\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 200,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 191,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mt-10 mb-10\",\n          children: /*#__PURE__*/_jsxDEV(\"form\", {\n            className: \"form-style\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              className: \"input-style\",\n              onChange: handleInputChange,\n              name: \"mintAmount\",\n              placeholder: `0.0000 ${tokenSymbol}`,\n              value: inputValue.mintAmount\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 209,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn-purple\",\n              onClick: mintTokens,\n              children: \"Mint Tokens\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 217,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 208,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mt-5\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"font-bold\",\n            children: \"Contract Address: \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 227,\n            columnNumber: 14\n          }, this), contractAddress]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mt-5\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"font-bold\",\n            children: \"Token Owner Address: \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 230,\n            columnNumber: 14\n          }, this), tokenOwnerAddress]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 230,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mt-5\",\n        children: [isWalletConnected && /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"font-bold\",\n            children: \"Your Wallet Address: \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 233,\n            columnNumber: 36\n          }, this), yourWalletAddress]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 33\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn-connect\",\n          onClick: checkIfWalletIsConnected,\n          children: isWalletConnected ? \"Wallet Connected 🔒\" : \"Connect Wallet 🔑\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 234,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 153,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"akoRLAlnwSSR2TMdefX6WdNVU5I=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/SaffetYurtoglu/Desktop/memecoin-dapp-completed/src/App.js"],"names":["useState","useEffect","ethers","utils","abi","App","isWalletConnected","setIsWalletConnected","inputValue","setInputValue","walletAddress","transferAmount","burnAmount","mintAmount","tokenName","setTokenName","tokenSymbol","setTokenSymbol","tokenTotalSupply","setTokenTotalSupply","isTokenOwner","setIsTokenOwner","tokenOwnerAddress","setTokenOwnerAddress","yourWalletAddress","setYourWalletAddress","error","setError","contractAddress","contractABI","checkIfWalletIsConnected","window","ethereum","accounts","request","method","account","console","log","getTokenInfo","provider","providers","Web3Provider","signer","getSigner","tokenContract","Contract","name","symbol","tokenOwner","owner","tokenSupply","totalSupply","formatEther","toLowerCase","transferToken","event","preventDefault","txn","transfer","parseEther","wait","hash","burnTokens","burn","mintTokens","mint","handleInputChange","prevFormData","target","value"],"mappings":"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","sourcesContent":["import { useState, useEffect } from 'react';\nimport { ethers, utils } from \"ethers\";\nimport abi from \"./contracts/MemeCoin.json\";\n\nfunction App() {\n  const [isWalletConnected, setIsWalletConnected] = useState(false);\n  const [inputValue, setInputValue] = useState({ walletAddress: \"\", transferAmount: \"\", burnAmount: \"\", mintAmount: \"\" });\n  const [tokenName, setTokenName] = useState(\"\");\n  const [tokenSymbol, setTokenSymbol] = useState(\"\");\n  const [tokenTotalSupply, setTokenTotalSupply] = useState(0);\n  const [isTokenOwner, setIsTokenOwner] = useState(false);\n  const [tokenOwnerAddress, setTokenOwnerAddress] = useState(null);\n  const [yourWalletAddress, setYourWalletAddress] = useState(null);\n  const [error, setError] = useState(null);\n\n  const contractAddress = '0x5FbDB2315678afecb367f032d93F642f64180aa3';\n  const contractABI = abi.abi;\n\n  const checkIfWalletIsConnected = async () => {\n    try {\n      if (window.ethereum) {\n        const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' })\n        const account = accounts[0];\n        setIsWalletConnected(true);\n        setYourWalletAddress(account);\n        console.log(\"Account Connected: \", account);\n      } else {\n        setError(\"Install a MetaMask wallet to get our token.\");\n        console.log(\"No Metamask detected\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  const getTokenInfo = async () => {\n    try {\n      if (window.ethereum) {\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\n        const signer = provider.getSigner();\n        const tokenContract = new ethers.Contract(contractAddress, contractABI, signer);\n        const [account] = await window.ethereum.request({ method: 'eth_requestAccounts' });\n\n        let tokenName = await tokenContract.name();\n        let tokenSymbol = await tokenContract.symbol();\n        let tokenOwner = await tokenContract.owner();\n        let tokenSupply = await tokenContract.totalSupply();\n        tokenSupply = utils.formatEther(tokenSupply)\n\n        setTokenName(`${tokenName} `);\n        setTokenSymbol(tokenSymbol);\n        setTokenTotalSupply(tokenSupply);\n        setTokenOwnerAddress(tokenOwner);\n\n        if (account.toLowerCase() === tokenOwner.toLowerCase()) {\n          setIsTokenOwner(true)\n        }\n\n        console.log(\"Token Name: \", tokenName);\n        console.log(\"Token Symbol: \", tokenSymbol);\n        console.log(\"Token Supply: \", tokenSupply);\n        console.log(\"Token Owner: \", tokenOwner);\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  const transferToken = async (event) => {\n    event.preventDefault();\n    try {\n      if (window.ethereum) {\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\n        const signer = provider.getSigner();\n        const tokenContract = new ethers.Contract(contractAddress, contractABI, signer);\n\n        const txn = await tokenContract.transfer(inputValue.walletAddress, utils.parseEther(inputValue.transferAmount));\n        console.log(\"Transfering tokens...\");\n        await txn.wait();\n        console.log(\"Tokens Transfered\", txn.hash);\n\n      } else {\n        console.log(\"Ethereum object not found, install Metamask.\");\n        setError(\"Install a MetaMask wallet to get our token.\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  const burnTokens = async (event) => {\n    event.preventDefault();\n    try {\n      if (window.ethereum) {\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\n        const signer = provider.getSigner();\n        const tokenContract = new ethers.Contract(contractAddress, contractABI, signer);\n\n        const txn = await tokenContract.burn(utils.parseEther(inputValue.burnAmount));\n        console.log(\"Burning tokens...\");\n        await txn.wait();\n        console.log(\"Tokens burned...\", txn.hash);\n\n        let tokenSupply = await tokenContract.totalSupply();\n        tokenSupply = utils.formatEther(tokenSupply)\n        setTokenTotalSupply(tokenSupply);\n\n      } else {\n        console.log(\"Ethereum object not found, install Metamask.\");\n        setError(\"Install a MetaMask wallet to get our token.\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  const mintTokens = async (event) => {\n    event.preventDefault();\n    try {\n      if (window.ethereum) {\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\n        const signer = provider.getSigner();\n        const tokenContract = new ethers.Contract(contractAddress, contractABI, signer);\n        let tokenOwner = await tokenContract.owner();\n        const txn = await tokenContract.mint(tokenOwner, utils.parseEther(inputValue.mintAmount));\n        console.log(\"Minting tokens...\");\n        await txn.wait();\n        console.log(\"Tokens minted...\", txn.hash);\n\n        let tokenSupply = await tokenContract.totalSupply();\n        tokenSupply = utils.formatEther(tokenSupply)\n        setTokenTotalSupply(tokenSupply);\n\n      } else {\n        console.log(\"Ethereum object not found, install Metamask.\");\n        setError(\"Install a MetaMask wallet to get our token.\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  const handleInputChange = (event) => {\n    setInputValue(prevFormData => ({ ...prevFormData, [event.target.name]: event.target.value }));\n  }\n\n  useEffect(() => {\n    checkIfWalletIsConnected();\n    getTokenInfo();\n  }, [])\n\n  return (\n    <main className=\"main-container\">\n      <h2 className=\"headline\">\n        <span className=\"headline-gradient\">Meme Coin Project</span>\n        <img className=\"inline p-3 ml-2\" src=\"https://i.imgur.com/5JfHKHU.png\" alt=\"Meme Coin\" width=\"60\" height=\"30\" />\n      </h2>\n      <section className=\"customer-section px-10 pt-5 pb-10\">\n        {error && <p className=\"text-2xl text-red-700\">{error}</p>}\n        <div className=\"mt-5\">\n          <span className=\"mr-5\"><strong>Coin:</strong> {tokenName} </span>\n          <span className=\"mr-5\"><strong>Ticker:</strong>  {tokenSymbol} </span>\n          <span className=\"mr-5\"><strong>Total Supply:</strong>  {tokenTotalSupply}</span>\n        </div>\n        <div className=\"mt-7 mb-9\">\n          <form className=\"form-style\">\n            <input\n              type=\"text\"\n              className=\"input-double\"\n              onChange={handleInputChange}\n              name=\"walletAddress\"\n              placeholder=\"Wallet Address\"\n              value={inputValue.walletAddress}\n            />\n            <input\n              type=\"text\"\n              className=\"input-double\"\n              onChange={handleInputChange}\n              name=\"transferAmount\"\n              placeholder={`0.0000 ${tokenSymbol}`}\n              value={inputValue.transferAmount}\n            />\n            <button\n              className=\"btn-purple\"\n              onClick={transferToken}>Transfer Tokens</button>\n          </form>\n        </div>\n        {isTokenOwner && (\n          <section>\n            <div className=\"mt-10 mb-10\">\n              <form className=\"form-style\">\n                <input\n                  type=\"text\"\n                  className=\"input-style\"\n                  onChange={handleInputChange}\n                  name=\"burnAmount\"\n                  placeholder={`0.0000 ${tokenSymbol}`}\n                  value={inputValue.burnAmount}\n                />\n                <button\n                  className=\"btn-purple\"\n                  onClick={burnTokens}>\n                  Burn Tokens\n                </button>\n              </form>\n            </div>\n            <div className=\"mt-10 mb-10\">\n              <form className=\"form-style\">\n                <input\n                  type=\"text\"\n                  className=\"input-style\"\n                  onChange={handleInputChange}\n                  name=\"mintAmount\"\n                  placeholder={`0.0000 ${tokenSymbol}`}\n                  value={inputValue.mintAmount}\n                />\n                <button\n                  className=\"btn-purple\"\n                  onClick={mintTokens}>\n                  Mint Tokens\n                </button>\n              </form>\n            </div>\n          </section>\n        )}\n        <div className=\"mt-5\">\n          <p><span className=\"font-bold\">Contract Address: </span>{contractAddress}</p>\n        </div>\n        <div className=\"mt-5\">\n          <p><span className=\"font-bold\">Token Owner Address: </span>{tokenOwnerAddress}</p>\n        </div>\n        <div className=\"mt-5\">\n          {isWalletConnected && <p><span className=\"font-bold\">Your Wallet Address: </span>{yourWalletAddress}</p>}\n          <button className=\"btn-connect\" onClick={checkIfWalletIsConnected}>\n            {isWalletConnected ? \"Wallet Connected 🔒\" : \"Connect Wallet 🔑\"}\n          </button>\n        </div>\n\n      </section>\n    </main>\n  );\n}\nexport default App;\n"]},"metadata":{},"sourceType":"module"}